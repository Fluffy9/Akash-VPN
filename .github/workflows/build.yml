name: Build and Deploy Containers

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/akash-vpn

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
      docs: ${{ steps.changes.outputs.docs }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'server/**'
            docs:
              - 'akash-vpn-docs/**'

  build-frontend:
    name: Build Frontend Container
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Normalize image owner to lowercase
        run: echo "IMAGE_PREFIX_LOWER=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')/akash-vpn" >> $GITHUB_ENV

      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX_LOWER }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  build-backend:
    name: Build Backend Container
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Normalize image owner to lowercase
        run: echo "IMAGE_PREFIX_LOWER=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')/akash-vpn" >> $GITHUB_ENV

      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX_LOWER }}-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  build-docs:
    name: Build Docs Container
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.docs == 'true' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Normalize image owner to lowercase
        run: echo "IMAGE_PREFIX_LOWER=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')/akash-vpn" >> $GITHUB_ENV

      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX_LOWER }}-docs
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docs image
        uses: docker/build-push-action@v5
        with:
          context: ./akash-vpn-docs
          file: ./akash-vpn-docs/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    if: github.event_name == 'pull_request' && (needs.build-frontend.result == 'success' || needs.build-backend.result == 'success' || needs.build-docs.result == 'success')
    needs: [build-frontend, build-backend, build-docs]
    strategy:
      fail-fast: false
      matrix:
        service: [frontend, backend, docs]
    steps:
      - name: Check if service was built
        id: check-build
        run: |
          if [[ "${{ matrix.service }}" == "frontend" && "${{ needs.build-frontend.result }}" != "success" ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.service }}" == "backend" && "${{ needs.build-backend.result }}" != "success" ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.service }}" == "docs" && "${{ needs.build-docs.result }}" != "success" ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Run Trivy vulnerability scanner
        if: steps.check-build.outputs.skip == 'false'
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ toLower(github.repository_owner) }}/akash-vpn-${{ matrix.service }}:sha-${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        if: always() && steps.check-build.outputs.skip == 'false'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && (needs.build-frontend.result == 'success' || needs.build-backend.result == 'success' || needs.build-docs.result == 'success')
    needs: [build-frontend, build-backend, build-docs]
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging environment
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment logic here
          # This could be updating Akash deployments, Kubernetes configs, etc.

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (needs.build-frontend.result == 'success' || needs.build-backend.result == 'success' || needs.build-docs.result == 'success')
    needs: [build-frontend, build-backend, build-docs]
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production environment
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment logic here
          # This could be updating Akash deployments, Kubernetes configs, etc.

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    if: always()
    needs: [build-frontend, build-backend, build-docs]
    steps:
      - name: Delete old container images
        run: |
          echo "Cleaning up old container images..."
          # Add logic to clean up old images to save registry space